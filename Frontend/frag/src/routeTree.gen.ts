/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as FragranceIndexRouteImport } from './routes/fragrance/index'
import { Route as BrandsIndexRouteImport } from './routes/brands/index'
import { Route as FragranceFragranceIdRouteImport } from './routes/fragrance/$fragranceId'
import { Route as BrandsCollectionCollectionIdRouteImport } from './routes/brands/collection/$collectionId'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const FragranceIndexRoute = FragranceIndexRouteImport.update({
  id: '/fragrance/',
  path: '/fragrance/',
  getParentRoute: () => rootRouteImport,
} as any)
const BrandsIndexRoute = BrandsIndexRouteImport.update({
  id: '/brands/',
  path: '/brands/',
  getParentRoute: () => rootRouteImport,
} as any)
const FragranceFragranceIdRoute = FragranceFragranceIdRouteImport.update({
  id: '/fragrance/$fragranceId',
  path: '/fragrance/$fragranceId',
  getParentRoute: () => rootRouteImport,
} as any)
const BrandsCollectionCollectionIdRoute =
  BrandsCollectionCollectionIdRouteImport.update({
    id: '/brands/collection/$collectionId',
    path: '/brands/collection/$collectionId',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/fragrance/$fragranceId': typeof FragranceFragranceIdRoute
  '/brands': typeof BrandsIndexRoute
  '/fragrance': typeof FragranceIndexRoute
  '/brands/collection/$collectionId': typeof BrandsCollectionCollectionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/fragrance/$fragranceId': typeof FragranceFragranceIdRoute
  '/brands': typeof BrandsIndexRoute
  '/fragrance': typeof FragranceIndexRoute
  '/brands/collection/$collectionId': typeof BrandsCollectionCollectionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/fragrance/$fragranceId': typeof FragranceFragranceIdRoute
  '/brands/': typeof BrandsIndexRoute
  '/fragrance/': typeof FragranceIndexRoute
  '/brands/collection/$collectionId': typeof BrandsCollectionCollectionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/fragrance/$fragranceId'
    | '/brands'
    | '/fragrance'
    | '/brands/collection/$collectionId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/fragrance/$fragranceId'
    | '/brands'
    | '/fragrance'
    | '/brands/collection/$collectionId'
  id:
    | '__root__'
    | '/'
    | '/fragrance/$fragranceId'
    | '/brands/'
    | '/fragrance/'
    | '/brands/collection/$collectionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FragranceFragranceIdRoute: typeof FragranceFragranceIdRoute
  BrandsIndexRoute: typeof BrandsIndexRoute
  FragranceIndexRoute: typeof FragranceIndexRoute
  BrandsCollectionCollectionIdRoute: typeof BrandsCollectionCollectionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fragrance/': {
      id: '/fragrance/'
      path: '/fragrance'
      fullPath: '/fragrance'
      preLoaderRoute: typeof FragranceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brands/': {
      id: '/brands/'
      path: '/brands'
      fullPath: '/brands'
      preLoaderRoute: typeof BrandsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/fragrance/$fragranceId': {
      id: '/fragrance/$fragranceId'
      path: '/fragrance/$fragranceId'
      fullPath: '/fragrance/$fragranceId'
      preLoaderRoute: typeof FragranceFragranceIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/brands/collection/$collectionId': {
      id: '/brands/collection/$collectionId'
      path: '/brands/collection/$collectionId'
      fullPath: '/brands/collection/$collectionId'
      preLoaderRoute: typeof BrandsCollectionCollectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FragranceFragranceIdRoute: FragranceFragranceIdRoute,
  BrandsIndexRoute: BrandsIndexRoute,
  FragranceIndexRoute: FragranceIndexRoute,
  BrandsCollectionCollectionIdRoute: BrandsCollectionCollectionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
